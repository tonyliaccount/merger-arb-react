{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["InputField","props","afterSubmission","event","price","initial_margin","maintenance_margin","type","callback","preventDefault","state","marginCallPrice","setState","prevState","price_history","fetch","method","headers","body","JSON","stringify","query","then","res","json","data","catch","console","error","bind","Container","fluid","Form","className","onSubmit","this","Group","Label","Control","step","placeholder","onChange","target","value","Text","as","Button","variant","ListGroup","reverse","map","item","Item","id","margin_call_price","toFixed","React","Component","App","Navbar","bg","Brand","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.157e4e4c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nimport React from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { Container, ListGroup, Navbar } from 'react-bootstrap';\n\nfunction getMarginCallPrice(price, initial_margin, maintenance_margin, type, callback) {\n    //fetch('http://localhost:5000/graphql', {\n    fetch('https://merger-arb.herokuapp.com/graphql', {\n    method: \"POST\",\n    headers: { // Note: This is headers with a 's'. \n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ // Note: Query starts and end with backtick!\n      query: \n      `mutation { \n        marginCallPrice(\n          price: ${price} \n          initial_margin: ${initial_margin} \n          maintenance_margin: ${maintenance_margin} \n          type: ${type}\n        ) \n        {\n          id \n          price \n          initial_margin \n          maintenance_margin \n          type \n          margin_call_price \n        } \n      }`\n    })\n  })\n    .then(res => res.json())\n    .then(res => callback(res.data))\n    .catch(console.error)\n}\n\nclass InputField extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      price: 0.0,\n      initial_margin: 0.0,\n      maintenance_margin: 0.0,\n      type: \"LONG\",\n      price_history : []\n    };\n\n    this.afterSubmission = this.afterSubmission.bind(this)\n  }\n\n  afterSubmission = (event) => {\n    event.preventDefault();\n\n    getMarginCallPrice(this.state.price, this.state.initial_margin, this.state.maintenance_margin, this.state.type, ( {marginCallPrice} ) => {\n      if (marginCallPrice) {\n\n        this.setState( prevState => ({\n          price_history: [...prevState.price_history, marginCallPrice]\n        }));\n\n      }\n    });\n  }\n\n  render() {\n    return(\n      <Container fluid>\n        <Form className=\"mb-3\" onSubmit = {this.afterSubmission}>\n          <Form.Group className=\"mb-3\">\n            <Form.Label>Price:</Form.Label> \n            <Form.Control type=\"number\" step=\"any\" placeholder=\"Amount in dollars\" \n              onChange={event => {\n                this.setState({\n                  price: event.target.value\n                });\n                }\n              } \n            />\n            <Form.Text>\n              Please enter a non-negative value.\n            </Form.Text>\n          </Form.Group>\n          \n          <Form.Group className=\"mb-3\">\n            <Form.Label>Initial Margin:</Form.Label> \n            <Form.Control type=\"number\" step=\"any\" placeholder=\"Decimal value between 0 and 1\"\n              onChange={event => {\n                this.setState({\n                  initial_margin: event.target.value\n                });\n                }\n              } \n            />\n            <Form.Text>\n              e.g. \"0.5\" implies a initial margin of 50%\n            </Form.Text>\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\">\n            <Form.Label>Maintenance Margin:</Form.Label> \n            <Form.Control type=\"number\" step=\"any\" placeholder=\"Decimal value between 0 and 1\" \n              onChange={event => {\n                this.setState({\n                  maintenance_margin: event.target.value\n                });\n                }\n              } \n            />\n            <Form.Text>\n              Note: Maintenance margin cannot be higher than initial margin.\n            </Form.Text>\n          </Form.Group>\n          \n          <Form.Group className=\"mb-3\">\n            <Form.Label>Type:</Form.Label>\n            <Form.Control as=\"select\" \n              onChange={event => {\n                this.setState({\n                  type: event.target.value\n                });\n                }\n              } \n            >\n              <option value=\"LONG\">Long</option>\n              <option value=\"SHORT\">Short</option>\n            </Form.Control>  \n          </Form.Group>\n\n          <Form.Group className=\"mb-6\">\n            <Button variant=\"primary\" type=\"submit\" >\n              Submit\n            </Button>\n          </Form.Group>\n        </Form>\n\n        <ListGroup className=\"mb-3\">\n          {\n            this.state.price_history.reverse().map( (item) => (\n              <ListGroup.Item id={item.id} >\n                Margin Call Price: ${item.margin_call_price.toFixed(2)}\n              </ListGroup.Item>\n            ))\n          }\n        </ListGroup>\n\n      </Container>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Container>\n          <Navbar.Brand>\n            Merger-Arb\n          </Navbar.Brand>\n        </Container>\n      </Navbar>\n      \n      <InputField>\n      </InputField>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}